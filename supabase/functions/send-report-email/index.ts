import { serve } from 'https://deno.land/std@0.177.0/http/server.ts'
// import { createClient } from 'https://esm.sh/@supabase/supabase-js@2' // Only if you need to interact with Supabase data from within the function

// IMPORTANT: Set these in your Supabase project's Edge Function settings
// const RESEND_API_KEY = Deno.env.get('RESEND_API_KEY');
// const FROM_EMAIL = Deno.env.get('FROM_EMAIL') || 'noreply@yourdomain.com';

console.log("send-report-email function booting up.");

serve(async (req: Request) => {
  // Handle CORS preflight request
  if (req.method === 'OPTIONS') {
    return new Response('ok', {
      headers: {
        'Access-Control-Allow-Origin': '*', // Adjust to your frontend URL in production
        'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
        'Access-Control-Allow-Methods': 'POST',
      }
    });
  }

  try {
    const { email, report } = await req.json();

    if (!email || !report) {
      return new Response(JSON.stringify({ error: 'Missing email or report data in request body' }), {
        headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },
        status: 400,
      });
    }

    console.log(`[send-report-email] Received request to send email to: ${email}`);
    console.log(`[send-report-email] Report Title: ${report.title}`);
    console.log(`[send-report-email] Report Content (first 100 chars): ${report.content?.substring(0, 100)}...`);
    console.log(`[send-report-email] Report Recommendations (first 100 chars): ${report.recommendations?.substring(0, 100)}...`);

    // ** Placeholder for actual email sending logic **
    // This is where you would integrate with an email provider like Resend, SendGrid, etc.
    //
    // Example with Resend (conceptual - requires RESEND_API_KEY and FROM_EMAIL env vars):
    //
    // if (!RESEND_API_KEY) {
    //   console.error("RESEND_API_KEY is not set. Cannot send email.");
    //   throw new Error("Email provider API key is not configured.");
    // }
    //
    // const emailHtml = `
    //   <html>
    //     <body>
    //       <h1>${report.title}</h1>
    //       <p>${report.content}</p>
    //       <h2>Recommendations:</h2>
    //       <p>${report.recommendations}</p>
    //       <hr>
    //       <p><small>This email was generated by YouGlow.</small></p>
    //     </body>
    //   </html>
    // `;
    //
    // const resendResponse = await fetch('https://api.resend.com/emails', {
    //   method: 'POST',
    //   headers: {
    //     'Content-Type': 'application/json',
    //     'Authorization': `Bearer ${RESEND_API_KEY}`,
    //   },
    //   body: JSON.stringify({
    //     from: FROM_EMAIL,
    //     to: email,
    //     subject: report.title || 'Your Personalized Skin Report from YouGlow',
    //     html: emailHtml,
    //   }),
    // });
    //
    // if (!resendResponse.ok) {
    //   const errorBody = await resendResponse.json();
    //   console.error(`[send-report-email] Resend API error: ${resendResponse.status}`, errorBody);
    //   throw new Error(`Failed to send email via Resend: ${errorBody.message || resendResponse.statusText}`);
    // }
    //
    // console.log(`[send-report-email] Email successfully sent to ${email} via Resend. ID: ${resendResponse.id}`);
    // const emailProviderResponse = { success: true, messageId: resendResponse.id };

    // Simulate success if no actual email provider is configured for now
    const simulatedSuccess = {
      message: `[Simulated] Email report task processed for: ${email}. Report title: ${report.title}.`,
      emailQueued: true
    };
    console.log(simulatedSuccess.message);


    return new Response(JSON.stringify({
      success: true,
      // data: emailProviderResponse // Uncomment when using a real provider
      data: simulatedSuccess
    }), {
      headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },
      status: 200,
    });

  } catch (error) {
    console.error('[send-report-email] Error processing request:', error);
    return new Response(JSON.stringify({ error: error.message || 'An unknown error occurred' }), {
      headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },
      status: 500,
    });
  }
});
